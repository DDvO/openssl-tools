#! /bin/bash

function usage_exit {
    echo "Usage: $0 <options including prnum and reviewer(s)>"
    echo "    or $0 [<options>] -- <prnum> <reviewer>..."
    echo "Options may include addrev options and gitaddrev filter args."
    exit 9
}

set -o errexit

WHAT=openssl
INTERACTIVE=yes
AUTOSQUASH="--autosquash"
REMOTE=""
REL=""
BUILD=yes
[ -z ${CC+x} ] && CC="ccache gcc" # opensslbuild will otherwise use "ccache clang-3.6"

if [ ! -d .git ] ; then
    echo Not at a top-level git directory
    exit 1
fi

PRNUM=
TEAM=""
ADDREVOPTS=""
# Parse JCL.
shopt -s extglob
while [ $# -ne 0 ]; do
    case "$1" in
    --tools)
        WHAT=tools ; BUILD=no ; shift
        ;;
    --web)
        WHAT=web ; BUILD=no ; shift
        ;;
    --noautosquash)
        AUTOSQUASH="" ; shift
        ;;
    --squash)
        INTERACTIVE=no ; shift
        ;;
    --nobuild)
        BUILD=no ; shift
        ;;
    --remote)
        if [ $# -lt 2 ] ; then
            echo "Missing argument of '$1'"
            usage_exit
        fi
        shift; REMOTE=$1; shift
        ;;
    --ref)
        if [ $# -lt 2 ] ; then
            echo "Missing argument of '$1'"
            usage_exit
        fi
        shift; REL=$1; shift
        ;;
    --)
        if [ $# -lt 3 ] ; then
            echo "Missing <prnum> <reviewer>... after '--'"
            usage_exit
        fi
        shift; PRNUM=$1 ; shift
        TEAM="$TEAM $*"
        break
        ;;
    -*) # e.g., --verbose, --trivial, --myemail=...
        ADDREVOPTS="$ADDREVOPTS $1"
        shift
        ;;
    +([[:digit:]]) ) # e.g., 1453
        PRNUM=$1; shift
        ;;
    @*) # e.g., @t8m
        TEAM="$TEAM $1"; shift
        ;;
    +([[:alnum:]-]) ) # e.g., levitte
        if [[ $1 =~ ^[0-9a-f]{7,}+$ ]]; then # e.g., edd05b7
            ADDREVOPTS="$ADDREVOPTS $1"
        else
            TEAM="$TEAM $1"
        fi
        shift
        ;;
    *) # e.g., edd05b7^^^^..19692bb2c32
        ADDREVOPTS="$ADDREVOPTS $1"; shift
        ;;
    esac
done
ADDREVOPTS=${ADDREVOPTS# } # chop any leading ' '

[ "$REMOTE" = "" ] && REMOTE=`git remote -v | awk '/git.openssl.org.*(push)/{ print $1; }' | head -n 1`
if [ "$REMOTE" = "" ] ; then
    echo Cannot find git remote with URL including 'git.openssl.org'
    exit 1
fi

if [ "$PRNUM" = "" -o "$TEAM" = "" ] ; then
    usage_exit
fi

PR_URL=https://api.github.com/repos/openssl/$WHAT/pulls/$PRNUM
if ! wget --quiet $PR_URL -O /tmp/gh$$; then
    echo "Error getting $PR_URL"
    exit 1
fi
set -- `python -c '
from __future__ import print_function
import json, sys;
input = json.load(sys.stdin)
print(str(input["head"]["label"]).replace(":", " "),
      str(input["head"]["repo"]["ssh_url"]))'        </tmp/gh$$`
WHO=$1
BRANCH=$2
REPO=$3
rm /tmp/gh$$

if [ -z "$WHO" -o -z "$BRANCH" -o -z "$REPO" ]; then
    echo "Could not determine from $PR_URL which branch of whom to fetch from where"
    exit 1
fi

if [ "$REL" = "" ]; then
    REL=`git rev-parse --abbrev-ref HEAD` # usually will be 'HEAD' or e.g., OpenSSL_1_1_1-stable
else
    echo -n "Press Enter to checkout $REL: "; read foo
    git checkout $REL
fi

echo -n "Press Enter to pull the latest $REMOTE/$REL: "; read foo
git pull $REMOTE || (git rebase --abort; exit 1)

WORK="copy-of-${WHO}-${BRANCH}"

function cleanup {
    rv=$?
    echo # new line
    [ $rv -ne 0 ] && echo -e "\nghmerge failed"
    if [ "$WORK" != "$REL" ]; then
        echo Restoring local $REL
        git checkout -q $REL
        git branch -qD $WORK 2>/dev/null
    fi
    git reset --hard $REMOTE/$REL # prune any leftover commits added locally
}
trap 'cleanup' EXIT

git checkout -b $WORK $REL

# append new commits from $REPO/$BRANCH
echo Rebasing $REPO/$BRANCH on $REL...
git pull --rebase $REPO $BRANCH || (git rebase --abort; exit 1)

echo Diff against $REL
git diff $REL

if [ "$INTERACTIVE" == "yes" ] ; then
    echo -n "Press Enter to interactively rebase $AUTOSQUASH on $REL: "; read foo
    git rebase -i $AUTOSQUASH $REL || (git rebase --abort; exit 1)
    echo "Calling addrev $ADDREVOPTS --prnum=$PRNUM $TEAM ${REL}.."
    addrev $ADDREVOPTS --prnum=$PRNUM $TEAM ${REL}..
fi

echo Log since $REL
git log $REL..

git checkout $REL
if [ "$INTERACTIVE" != "yes" ] ; then
    echo -n "Press Enter to non-interactively merge --squash $BRANCH to $REL: "; read foo
    git merge --ff-only --no-commit --squash $WORK
    AUTHOR=`git show --no-patch --pretty="format:%an <%ae>" $WORK`
    git commit --author="$AUTHOR"
    addrev $ADDREVOPTS --prnum=$PRNUM $TEAM $REMOTE/${REL}..
else
    # echo -n "Press Enter to merge to $REL: "; read foo
    git merge --ff-only $WORK
fi

echo New log since $REMOTE/$REL
git log $REMOTE/$REL..

if [ "$BUILD" == "yes" ] ; then
    echo Rebuilding...
    CC="$CC" opensslbuild >/dev/null # any STDERR output will be shown
fi

while true ; do
    echo -n "Enter 'y'/'yes' to push to $REMOTE/$REL or 'n'/'no' to abort: "
    read x
    x="`echo $x | tr A-Z a-z`"
    if [ "$x" = "y" -o "$x" = "yes" -o "$x" = "n" -o "$x" = "no" ] ; then
        break
    fi
done

if [ "$x" = "y" -o "$x" = "yes" ] ; then
    git push -v $REMOTE $REL
fi
